CREATE DATABASE TEST;
CREATE TABLE users (
    USER_ID INT PRIMARY KEY,
    USER_NAME VARCHAR(20) NOT NULL,
    USER_STATUS VARCHAR(20) NOT NULL
);
INSERT INTO USERS VALUES (1, 'Alice', 'Active');
INSERT INTO USERS VALUES (2, 'Bob', 'Inactive');
INSERT INTO USERS VALUES (3, 'Charlie', 'Active');
INSERT INTO USERS  VALUES (4, 'David', 'Active');
INSERT INTO USERS  VALUES (5, 'Eve', 'Inactive');
INSERT INTO USERS  VALUES (6, 'Frank', 'Active');
INSERT INTO USERS  VALUES (7, 'Grace', 'Inactive');
INSERT INTO USERS  VALUES (8, 'Heidi', 'Active');
INSERT INTO USERS VALUES (9, 'Ivan', 'Inactive');
INSERT INTO USERS VALUES (10, 'Judy', 'Active');

SELECT * FROM users;
CREATE TABLE logins (
    USER_ID INT,
    LOGIN_TIMESTAMP DATETIME NOT NULL,
    SESSION_ID INT PRIMARY KEY,
    SESSION_SCORE INT,
    FOREIGN KEY (USER_ID) REFERENCES USERS(USER_ID)
);
INSERT INTO LOGINS  VALUES (1, '2023-07-15 09:30:00', 1001, 85);
INSERT INTO LOGINS VALUES (2, '2023-07-22 10:00:00', 1002, 90);
INSERT INTO LOGINS VALUES (3, '2023-08-10 11:15:00', 1003, 75);
INSERT INTO LOGINS VALUES (4, '2023-08-20 14:00:00', 1004, 88);
INSERT INTO LOGINS  VALUES (5, '2023-09-05 16:45:00', 1005, 82);
INSERT INTO LOGINS  VALUES (6, '2023-10-12 08:30:00', 1006, 77);
INSERT INTO LOGINS  VALUES (7, '2023-11-18 09:00:00', 1007, 81);
INSERT INTO LOGINS VALUES (8, '2023-12-01 10:30:00', 1008, 84);
INSERT INTO LOGINS  VALUES (9, '2023-12-15 13:15:00', 1009, 79);

select * from logins;
--Adding more data to logins table
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1011, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2024-01-25 09:30:00', 1012, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-02-05 11:00:00', 1013, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2024-03-01 14:30:00', 1014, 91);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-03-15 16:00:00', 1015, 83);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2024-04-12 08:00:00', 1016, 80);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (7, '2024-05-18 09:15:00', 1017, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (8, '2024-05-28 10:45:00', 1018, 87);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (9, '2024-06-15 13:30:00', 1019, 76);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-25 15:00:00', 1010, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-26 15:45:00', 1020, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-27 15:00:00', 1021, 92);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (10, '2024-06-28 15:45:00', 1022, 93);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (1, '2024-01-10 07:45:00', 1101, 86);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (3, '2024-01-25 09:30:00', 1102, 89);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (5, '2024-01-15 11:00:00', 1103, 78);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (2, '2023-11-10 07:45:00', 1201, 82);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (4, '2023-11-25 09:30:00', 1202, 84);
INSERT INTO LOGINS (USER_ID, LOGIN_TIMESTAMP, SESSION_ID, SESSION_SCORE) VALUES (6, '2023-11-15 11:00:00', 1203, 80);

select * from logins;

-- ques1: Management wants to see all the users that did not login in the past 5 months --return: username.
--todays--17-JAN-2025
--5 month back 17-08-2024
--1st method
SELECT USER_ID
FROM LOGINS
GROUP BY USER_ID
HAVING MAX(LOGIN_TIMESTAMP) < DATEADD(MONTH, -5, GETDATE())
--2nd method
select distinct user_id from logins where user_id not in(
select user_id from logins
where LOGIN_TIMESTAMP > DATEADD(MONTH, -5, GETDATE()))

-- ques2: For the business units' quarterly analysis, calculate how many users and how many sessions were at each quarter
-- order by quarter from newest to oldest
-- Return: first day of the quarter, user_cnt, session_cnt.
SELECT DATETRUNC(QUARTER, MIN(LOGIN_TIMESTAMP)) AS FIRST_QUARTER_DATE, COUNT(*) AS SESSION_CNT, 
COUNT(DISTINCT USER_ID) AS USER_CNT
FROM LOGINS
GROUP BY DATEPART(QUARTER, LOGIN_TIMESTAMP)

-- ques3: Display user id's that Log-in in January 2024 and did not Log-in on November 2023
-- Return User_id
SELECT DISTINCT USER_ID
FROM LOGINS
where LOGIN_TIMESTAMP BETWEEN '2024-01-01' AND '2024-01-31'
AND USER_ID NOT IN (SELECT USER_ID FROM LOGINS WHERE LOGIN_TIMESTAMP BETWEEN '2023-11-01' AND '2023-11-30')

--ques4: Add to the query from 2 the percentage change in sessions from last quarter.
-- Return first day of the quarter, session_cnt, session_cnt_prev, session_percent_change.
WITH CTE AS (
SELECT DATETRUNC(QUARTER, MIN(LOGIN_TIMESTAMP)) AS FIRST_QUARTER_DATE, COUNT(*) AS SESSION_CNT, 
COUNT(DISTINCT USER_ID) AS USER_CNT
FROM LOGINS
GROUP BY DATEPART(QUARTER, LOGIN_TIMESTAMP)
--ORDER BY FIRST_QUARTER_DATE 
)
SELECT *,
LAG(SESSION_CNT,1) OVER (ORDER BY FIRST_QUARTER_DATE) AS PREV_SESSION_CNT,
(SESSION_CNT - (LAG(SESSION_CNT,1) OVER (ORDER BY FIRST_QUARTER_DATE)))*100.0/(LAG(SESSION_CNT,1) OVER (ORDER BY FIRST_QUARTER_DATE))
FROM CTE 

--ques5: Display the user that had the highest session score (max) for each day -
-- Return: Date, username, score 
with cte as(
select user_id, cast(login_timestamp as date) as login_date, sum(session_score) as score
from logins
group by user_id, cast(login_timestamp as date)
--order by cast(login_timestamp as date), score
)
select * from (
select *,
row_number() over (partition by login_date order by score) as rn
from cte ) a
where rn = 1




































































